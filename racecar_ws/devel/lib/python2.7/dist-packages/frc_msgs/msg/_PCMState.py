# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frc_msgs/PCMState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PCMState(genpy.Message):
  _md5sum = "81c063a265e9b3f14b664414961808c7"
  _type = "frc_msgs/PCMState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header   header

string[]  name
int32[]   pcm_id
bool[]    enabled
bool[]    pressure_switch
float64[] compressor_current
bool[]    closed_loop_control
bool[]    current_too_high
bool[]    current_too_high_sticky
bool[]    shorted
bool[]    shorted_sticky
bool[]    not_connected
bool[]    not_connected_sticky
bool[]    voltage_fault
bool[]    voltage_sticky_fault
uint32[]  solenoid_blacklist

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','name','pcm_id','enabled','pressure_switch','compressor_current','closed_loop_control','current_too_high','current_too_high_sticky','shorted','shorted_sticky','not_connected','not_connected_sticky','voltage_fault','voltage_sticky_fault','solenoid_blacklist']
  _slot_types = ['std_msgs/Header','string[]','int32[]','bool[]','bool[]','float64[]','bool[]','bool[]','bool[]','bool[]','bool[]','bool[]','bool[]','bool[]','bool[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,name,pcm_id,enabled,pressure_switch,compressor_current,closed_loop_control,current_too_high,current_too_high_sticky,shorted,shorted_sticky,not_connected,not_connected_sticky,voltage_fault,voltage_sticky_fault,solenoid_blacklist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PCMState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.name is None:
        self.name = []
      if self.pcm_id is None:
        self.pcm_id = []
      if self.enabled is None:
        self.enabled = []
      if self.pressure_switch is None:
        self.pressure_switch = []
      if self.compressor_current is None:
        self.compressor_current = []
      if self.closed_loop_control is None:
        self.closed_loop_control = []
      if self.current_too_high is None:
        self.current_too_high = []
      if self.current_too_high_sticky is None:
        self.current_too_high_sticky = []
      if self.shorted is None:
        self.shorted = []
      if self.shorted_sticky is None:
        self.shorted_sticky = []
      if self.not_connected is None:
        self.not_connected = []
      if self.not_connected_sticky is None:
        self.not_connected_sticky = []
      if self.voltage_fault is None:
        self.voltage_fault = []
      if self.voltage_sticky_fault is None:
        self.voltage_sticky_fault = []
      if self.solenoid_blacklist is None:
        self.solenoid_blacklist = []
    else:
      self.header = std_msgs.msg.Header()
      self.name = []
      self.pcm_id = []
      self.enabled = []
      self.pressure_switch = []
      self.compressor_current = []
      self.closed_loop_control = []
      self.current_too_high = []
      self.current_too_high_sticky = []
      self.shorted = []
      self.shorted_sticky = []
      self.not_connected = []
      self.not_connected_sticky = []
      self.voltage_fault = []
      self.voltage_sticky_fault = []
      self.solenoid_blacklist = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pcm_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pcm_id))
      length = len(self.enabled)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.enabled))
      length = len(self.pressure_switch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.pressure_switch))
      length = len(self.compressor_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.compressor_current))
      length = len(self.closed_loop_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.closed_loop_control))
      length = len(self.current_too_high)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.current_too_high))
      length = len(self.current_too_high_sticky)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.current_too_high_sticky))
      length = len(self.shorted)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.shorted))
      length = len(self.shorted_sticky)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.shorted_sticky))
      length = len(self.not_connected)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.not_connected))
      length = len(self.not_connected_sticky)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.not_connected_sticky))
      length = len(self.voltage_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.voltage_fault))
      length = len(self.voltage_sticky_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.voltage_sticky_fault))
      length = len(self.solenoid_blacklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.solenoid_blacklist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pcm_id = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.enabled = struct.unpack(pattern, str[start:end])
      self.enabled = map(bool, self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.pressure_switch = struct.unpack(pattern, str[start:end])
      self.pressure_switch = map(bool, self.pressure_switch)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.compressor_current = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.closed_loop_control = struct.unpack(pattern, str[start:end])
      self.closed_loop_control = map(bool, self.closed_loop_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.current_too_high = struct.unpack(pattern, str[start:end])
      self.current_too_high = map(bool, self.current_too_high)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.current_too_high_sticky = struct.unpack(pattern, str[start:end])
      self.current_too_high_sticky = map(bool, self.current_too_high_sticky)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.shorted = struct.unpack(pattern, str[start:end])
      self.shorted = map(bool, self.shorted)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.shorted_sticky = struct.unpack(pattern, str[start:end])
      self.shorted_sticky = map(bool, self.shorted_sticky)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.not_connected = struct.unpack(pattern, str[start:end])
      self.not_connected = map(bool, self.not_connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.not_connected_sticky = struct.unpack(pattern, str[start:end])
      self.not_connected_sticky = map(bool, self.not_connected_sticky)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage_fault = struct.unpack(pattern, str[start:end])
      self.voltage_fault = map(bool, self.voltage_fault)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage_sticky_fault = struct.unpack(pattern, str[start:end])
      self.voltage_sticky_fault = map(bool, self.voltage_sticky_fault)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.solenoid_blacklist = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pcm_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pcm_id.tostring())
      length = len(self.enabled)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.enabled.tostring())
      length = len(self.pressure_switch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.pressure_switch.tostring())
      length = len(self.compressor_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.compressor_current.tostring())
      length = len(self.closed_loop_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.closed_loop_control.tostring())
      length = len(self.current_too_high)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.current_too_high.tostring())
      length = len(self.current_too_high_sticky)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.current_too_high_sticky.tostring())
      length = len(self.shorted)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.shorted.tostring())
      length = len(self.shorted_sticky)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.shorted_sticky.tostring())
      length = len(self.not_connected)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.not_connected.tostring())
      length = len(self.not_connected_sticky)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.not_connected_sticky.tostring())
      length = len(self.voltage_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.voltage_fault.tostring())
      length = len(self.voltage_sticky_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.voltage_sticky_fault.tostring())
      length = len(self.solenoid_blacklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.solenoid_blacklist.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pcm_id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.enabled = map(bool, self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.pressure_switch = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.pressure_switch = map(bool, self.pressure_switch)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.compressor_current = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.closed_loop_control = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.closed_loop_control = map(bool, self.closed_loop_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.current_too_high = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.current_too_high = map(bool, self.current_too_high)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.current_too_high_sticky = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.current_too_high_sticky = map(bool, self.current_too_high_sticky)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.shorted = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.shorted = map(bool, self.shorted)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.shorted_sticky = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.shorted_sticky = map(bool, self.shorted_sticky)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.not_connected = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.not_connected = map(bool, self.not_connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.not_connected_sticky = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.not_connected_sticky = map(bool, self.not_connected_sticky)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage_fault = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.voltage_fault = map(bool, self.voltage_fault)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage_sticky_fault = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.voltage_sticky_fault = map(bool, self.voltage_sticky_fault)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.solenoid_blacklist = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
