# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frc_msgs/RobotControllerData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import frc_msgs.msg
import std_msgs.msg

class RobotControllerData(genpy.Message):
  _md5sum = "bd038fd2805831a80b16311cd50a4a1d"
  _type = "frc_msgs/RobotControllerData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

int32 fpgaVersion
int64 fpgaRevision
uint64 fpgaTime
bool userButton
bool isSysActive
bool isBrownedOut
float64 inputVoltage
float64 inputCurrent
float64 voltage3V3
float64 current3V3
bool enabled3V3
int32 faultCount3V3
float64 voltage5V
float64 current5V
bool enabled5V
int32 faultCount5V
float64 voltage6V
float64 current6V
bool enabled6V
int32 faultCount6V
RobotControllerCANData canData

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: frc_msgs/RobotControllerCANData
float32 percentBusUtilization
int32 busOffCount
int32 txFullCount
int32 receiveErrorCount
int32 transmitErrorCount
"""
  __slots__ = ['header','fpgaVersion','fpgaRevision','fpgaTime','userButton','isSysActive','isBrownedOut','inputVoltage','inputCurrent','voltage3V3','current3V3','enabled3V3','faultCount3V3','voltage5V','current5V','enabled5V','faultCount5V','voltage6V','current6V','enabled6V','faultCount6V','canData']
  _slot_types = ['std_msgs/Header','int32','int64','uint64','bool','bool','bool','float64','float64','float64','float64','bool','int32','float64','float64','bool','int32','float64','float64','bool','int32','frc_msgs/RobotControllerCANData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fpgaVersion,fpgaRevision,fpgaTime,userButton,isSysActive,isBrownedOut,inputVoltage,inputCurrent,voltage3V3,current3V3,enabled3V3,faultCount3V3,voltage5V,current5V,enabled5V,faultCount5V,voltage6V,current6V,enabled6V,faultCount6V,canData

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotControllerData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fpgaVersion is None:
        self.fpgaVersion = 0
      if self.fpgaRevision is None:
        self.fpgaRevision = 0
      if self.fpgaTime is None:
        self.fpgaTime = 0
      if self.userButton is None:
        self.userButton = False
      if self.isSysActive is None:
        self.isSysActive = False
      if self.isBrownedOut is None:
        self.isBrownedOut = False
      if self.inputVoltage is None:
        self.inputVoltage = 0.
      if self.inputCurrent is None:
        self.inputCurrent = 0.
      if self.voltage3V3 is None:
        self.voltage3V3 = 0.
      if self.current3V3 is None:
        self.current3V3 = 0.
      if self.enabled3V3 is None:
        self.enabled3V3 = False
      if self.faultCount3V3 is None:
        self.faultCount3V3 = 0
      if self.voltage5V is None:
        self.voltage5V = 0.
      if self.current5V is None:
        self.current5V = 0.
      if self.enabled5V is None:
        self.enabled5V = False
      if self.faultCount5V is None:
        self.faultCount5V = 0
      if self.voltage6V is None:
        self.voltage6V = 0.
      if self.current6V is None:
        self.current6V = 0.
      if self.enabled6V is None:
        self.enabled6V = False
      if self.faultCount6V is None:
        self.faultCount6V = 0
      if self.canData is None:
        self.canData = frc_msgs.msg.RobotControllerCANData()
    else:
      self.header = std_msgs.msg.Header()
      self.fpgaVersion = 0
      self.fpgaRevision = 0
      self.fpgaTime = 0
      self.userButton = False
      self.isSysActive = False
      self.isBrownedOut = False
      self.inputVoltage = 0.
      self.inputCurrent = 0.
      self.voltage3V3 = 0.
      self.current3V3 = 0.
      self.enabled3V3 = False
      self.faultCount3V3 = 0
      self.voltage5V = 0.
      self.current5V = 0.
      self.enabled5V = False
      self.faultCount5V = 0
      self.voltage6V = 0.
      self.current6V = 0.
      self.enabled6V = False
      self.faultCount6V = 0
      self.canData = frc_msgs.msg.RobotControllerCANData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_iqQ3B4dBi2dBi2dBif4i().pack(_x.fpgaVersion, _x.fpgaRevision, _x.fpgaTime, _x.userButton, _x.isSysActive, _x.isBrownedOut, _x.inputVoltage, _x.inputCurrent, _x.voltage3V3, _x.current3V3, _x.enabled3V3, _x.faultCount3V3, _x.voltage5V, _x.current5V, _x.enabled5V, _x.faultCount5V, _x.voltage6V, _x.current6V, _x.enabled6V, _x.faultCount6V, _x.canData.percentBusUtilization, _x.canData.busOffCount, _x.canData.txFullCount, _x.canData.receiveErrorCount, _x.canData.transmitErrorCount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.canData is None:
        self.canData = frc_msgs.msg.RobotControllerCANData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 122
      (_x.fpgaVersion, _x.fpgaRevision, _x.fpgaTime, _x.userButton, _x.isSysActive, _x.isBrownedOut, _x.inputVoltage, _x.inputCurrent, _x.voltage3V3, _x.current3V3, _x.enabled3V3, _x.faultCount3V3, _x.voltage5V, _x.current5V, _x.enabled5V, _x.faultCount5V, _x.voltage6V, _x.current6V, _x.enabled6V, _x.faultCount6V, _x.canData.percentBusUtilization, _x.canData.busOffCount, _x.canData.txFullCount, _x.canData.receiveErrorCount, _x.canData.transmitErrorCount,) = _get_struct_iqQ3B4dBi2dBi2dBif4i().unpack(str[start:end])
      self.userButton = bool(self.userButton)
      self.isSysActive = bool(self.isSysActive)
      self.isBrownedOut = bool(self.isBrownedOut)
      self.enabled3V3 = bool(self.enabled3V3)
      self.enabled5V = bool(self.enabled5V)
      self.enabled6V = bool(self.enabled6V)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_iqQ3B4dBi2dBi2dBif4i().pack(_x.fpgaVersion, _x.fpgaRevision, _x.fpgaTime, _x.userButton, _x.isSysActive, _x.isBrownedOut, _x.inputVoltage, _x.inputCurrent, _x.voltage3V3, _x.current3V3, _x.enabled3V3, _x.faultCount3V3, _x.voltage5V, _x.current5V, _x.enabled5V, _x.faultCount5V, _x.voltage6V, _x.current6V, _x.enabled6V, _x.faultCount6V, _x.canData.percentBusUtilization, _x.canData.busOffCount, _x.canData.txFullCount, _x.canData.receiveErrorCount, _x.canData.transmitErrorCount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.canData is None:
        self.canData = frc_msgs.msg.RobotControllerCANData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 122
      (_x.fpgaVersion, _x.fpgaRevision, _x.fpgaTime, _x.userButton, _x.isSysActive, _x.isBrownedOut, _x.inputVoltage, _x.inputCurrent, _x.voltage3V3, _x.current3V3, _x.enabled3V3, _x.faultCount3V3, _x.voltage5V, _x.current5V, _x.enabled5V, _x.faultCount5V, _x.voltage6V, _x.current6V, _x.enabled6V, _x.faultCount6V, _x.canData.percentBusUtilization, _x.canData.busOffCount, _x.canData.txFullCount, _x.canData.receiveErrorCount, _x.canData.transmitErrorCount,) = _get_struct_iqQ3B4dBi2dBi2dBif4i().unpack(str[start:end])
      self.userButton = bool(self.userButton)
      self.isSysActive = bool(self.isSysActive)
      self.isBrownedOut = bool(self.isBrownedOut)
      self.enabled3V3 = bool(self.enabled3V3)
      self.enabled5V = bool(self.enabled5V)
      self.enabled6V = bool(self.enabled6V)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_iqQ3B4dBi2dBi2dBif4i = None
def _get_struct_iqQ3B4dBi2dBi2dBif4i():
    global _struct_iqQ3B4dBi2dBi2dBif4i
    if _struct_iqQ3B4dBi2dBi2dBif4i is None:
        _struct_iqQ3B4dBi2dBi2dBif4i = struct.Struct("<iqQ3B4dBi2dBi2dBif4i")
    return _struct_iqQ3B4dBi2dBi2dBif4i
