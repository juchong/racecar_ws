# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frc_msgs/JoystickState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class JoystickState(genpy.Message):
  _md5sum = "94b495e8f7801eaec0cdd481668e94e0"
  _type = "frc_msgs/JoystickState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

float64  leftStickX
float64  leftStickY

float64  rightStickX
float64  rightStickY

float64  leftTrigger
float64  rightTrigger

bool buttonAButton
bool buttonAPress
bool buttonARelease

bool buttonBButton
bool buttonBPress
bool buttonBRelease

bool buttonXButton
bool buttonXPress
bool buttonXRelease

bool buttonYButton
bool buttonYPress
bool buttonYRelease

bool bumperLeftButton
bool bumperLeftPress
bool bumperLeftRelease

bool bumperRightButton
bool bumperRightPress
bool bumperRightRelease

bool buttonBackButton
bool buttonBackPress
bool buttonBackRelease

bool buttonStartButton
bool buttonStartPress
bool buttonStartRelease

bool stickLeftButton
bool stickLeftPress
bool stickLeftRelease

bool stickRightButton
bool stickRightPress
bool stickRightRelease

bool directionUpButton
bool directionUpPress
bool directionUpRelease

bool directionDownButton
bool directionDownPress
bool directionDownRelease

bool directionLeftButton
bool directionLeftPress
bool directionLeftRelease

bool directionRightButton
bool directionRightPress
bool directionRightRelease

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','leftStickX','leftStickY','rightStickX','rightStickY','leftTrigger','rightTrigger','buttonAButton','buttonAPress','buttonARelease','buttonBButton','buttonBPress','buttonBRelease','buttonXButton','buttonXPress','buttonXRelease','buttonYButton','buttonYPress','buttonYRelease','bumperLeftButton','bumperLeftPress','bumperLeftRelease','bumperRightButton','bumperRightPress','bumperRightRelease','buttonBackButton','buttonBackPress','buttonBackRelease','buttonStartButton','buttonStartPress','buttonStartRelease','stickLeftButton','stickLeftPress','stickLeftRelease','stickRightButton','stickRightPress','stickRightRelease','directionUpButton','directionUpPress','directionUpRelease','directionDownButton','directionDownPress','directionDownRelease','directionLeftButton','directionLeftPress','directionLeftRelease','directionRightButton','directionRightPress','directionRightRelease']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,leftStickX,leftStickY,rightStickX,rightStickY,leftTrigger,rightTrigger,buttonAButton,buttonAPress,buttonARelease,buttonBButton,buttonBPress,buttonBRelease,buttonXButton,buttonXPress,buttonXRelease,buttonYButton,buttonYPress,buttonYRelease,bumperLeftButton,bumperLeftPress,bumperLeftRelease,bumperRightButton,bumperRightPress,bumperRightRelease,buttonBackButton,buttonBackPress,buttonBackRelease,buttonStartButton,buttonStartPress,buttonStartRelease,stickLeftButton,stickLeftPress,stickLeftRelease,stickRightButton,stickRightPress,stickRightRelease,directionUpButton,directionUpPress,directionUpRelease,directionDownButton,directionDownPress,directionDownRelease,directionLeftButton,directionLeftPress,directionLeftRelease,directionRightButton,directionRightPress,directionRightRelease

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JoystickState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.leftStickX is None:
        self.leftStickX = 0.
      if self.leftStickY is None:
        self.leftStickY = 0.
      if self.rightStickX is None:
        self.rightStickX = 0.
      if self.rightStickY is None:
        self.rightStickY = 0.
      if self.leftTrigger is None:
        self.leftTrigger = 0.
      if self.rightTrigger is None:
        self.rightTrigger = 0.
      if self.buttonAButton is None:
        self.buttonAButton = False
      if self.buttonAPress is None:
        self.buttonAPress = False
      if self.buttonARelease is None:
        self.buttonARelease = False
      if self.buttonBButton is None:
        self.buttonBButton = False
      if self.buttonBPress is None:
        self.buttonBPress = False
      if self.buttonBRelease is None:
        self.buttonBRelease = False
      if self.buttonXButton is None:
        self.buttonXButton = False
      if self.buttonXPress is None:
        self.buttonXPress = False
      if self.buttonXRelease is None:
        self.buttonXRelease = False
      if self.buttonYButton is None:
        self.buttonYButton = False
      if self.buttonYPress is None:
        self.buttonYPress = False
      if self.buttonYRelease is None:
        self.buttonYRelease = False
      if self.bumperLeftButton is None:
        self.bumperLeftButton = False
      if self.bumperLeftPress is None:
        self.bumperLeftPress = False
      if self.bumperLeftRelease is None:
        self.bumperLeftRelease = False
      if self.bumperRightButton is None:
        self.bumperRightButton = False
      if self.bumperRightPress is None:
        self.bumperRightPress = False
      if self.bumperRightRelease is None:
        self.bumperRightRelease = False
      if self.buttonBackButton is None:
        self.buttonBackButton = False
      if self.buttonBackPress is None:
        self.buttonBackPress = False
      if self.buttonBackRelease is None:
        self.buttonBackRelease = False
      if self.buttonStartButton is None:
        self.buttonStartButton = False
      if self.buttonStartPress is None:
        self.buttonStartPress = False
      if self.buttonStartRelease is None:
        self.buttonStartRelease = False
      if self.stickLeftButton is None:
        self.stickLeftButton = False
      if self.stickLeftPress is None:
        self.stickLeftPress = False
      if self.stickLeftRelease is None:
        self.stickLeftRelease = False
      if self.stickRightButton is None:
        self.stickRightButton = False
      if self.stickRightPress is None:
        self.stickRightPress = False
      if self.stickRightRelease is None:
        self.stickRightRelease = False
      if self.directionUpButton is None:
        self.directionUpButton = False
      if self.directionUpPress is None:
        self.directionUpPress = False
      if self.directionUpRelease is None:
        self.directionUpRelease = False
      if self.directionDownButton is None:
        self.directionDownButton = False
      if self.directionDownPress is None:
        self.directionDownPress = False
      if self.directionDownRelease is None:
        self.directionDownRelease = False
      if self.directionLeftButton is None:
        self.directionLeftButton = False
      if self.directionLeftPress is None:
        self.directionLeftPress = False
      if self.directionLeftRelease is None:
        self.directionLeftRelease = False
      if self.directionRightButton is None:
        self.directionRightButton = False
      if self.directionRightPress is None:
        self.directionRightPress = False
      if self.directionRightRelease is None:
        self.directionRightRelease = False
    else:
      self.header = std_msgs.msg.Header()
      self.leftStickX = 0.
      self.leftStickY = 0.
      self.rightStickX = 0.
      self.rightStickY = 0.
      self.leftTrigger = 0.
      self.rightTrigger = 0.
      self.buttonAButton = False
      self.buttonAPress = False
      self.buttonARelease = False
      self.buttonBButton = False
      self.buttonBPress = False
      self.buttonBRelease = False
      self.buttonXButton = False
      self.buttonXPress = False
      self.buttonXRelease = False
      self.buttonYButton = False
      self.buttonYPress = False
      self.buttonYRelease = False
      self.bumperLeftButton = False
      self.bumperLeftPress = False
      self.bumperLeftRelease = False
      self.bumperRightButton = False
      self.bumperRightPress = False
      self.bumperRightRelease = False
      self.buttonBackButton = False
      self.buttonBackPress = False
      self.buttonBackRelease = False
      self.buttonStartButton = False
      self.buttonStartPress = False
      self.buttonStartRelease = False
      self.stickLeftButton = False
      self.stickLeftPress = False
      self.stickLeftRelease = False
      self.stickRightButton = False
      self.stickRightPress = False
      self.stickRightRelease = False
      self.directionUpButton = False
      self.directionUpPress = False
      self.directionUpRelease = False
      self.directionDownButton = False
      self.directionDownPress = False
      self.directionDownRelease = False
      self.directionLeftButton = False
      self.directionLeftPress = False
      self.directionLeftRelease = False
      self.directionRightButton = False
      self.directionRightPress = False
      self.directionRightRelease = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d42B().pack(_x.leftStickX, _x.leftStickY, _x.rightStickX, _x.rightStickY, _x.leftTrigger, _x.rightTrigger, _x.buttonAButton, _x.buttonAPress, _x.buttonARelease, _x.buttonBButton, _x.buttonBPress, _x.buttonBRelease, _x.buttonXButton, _x.buttonXPress, _x.buttonXRelease, _x.buttonYButton, _x.buttonYPress, _x.buttonYRelease, _x.bumperLeftButton, _x.bumperLeftPress, _x.bumperLeftRelease, _x.bumperRightButton, _x.bumperRightPress, _x.bumperRightRelease, _x.buttonBackButton, _x.buttonBackPress, _x.buttonBackRelease, _x.buttonStartButton, _x.buttonStartPress, _x.buttonStartRelease, _x.stickLeftButton, _x.stickLeftPress, _x.stickLeftRelease, _x.stickRightButton, _x.stickRightPress, _x.stickRightRelease, _x.directionUpButton, _x.directionUpPress, _x.directionUpRelease, _x.directionDownButton, _x.directionDownPress, _x.directionDownRelease, _x.directionLeftButton, _x.directionLeftPress, _x.directionLeftRelease, _x.directionRightButton, _x.directionRightPress, _x.directionRightRelease))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.leftStickX, _x.leftStickY, _x.rightStickX, _x.rightStickY, _x.leftTrigger, _x.rightTrigger, _x.buttonAButton, _x.buttonAPress, _x.buttonARelease, _x.buttonBButton, _x.buttonBPress, _x.buttonBRelease, _x.buttonXButton, _x.buttonXPress, _x.buttonXRelease, _x.buttonYButton, _x.buttonYPress, _x.buttonYRelease, _x.bumperLeftButton, _x.bumperLeftPress, _x.bumperLeftRelease, _x.bumperRightButton, _x.bumperRightPress, _x.bumperRightRelease, _x.buttonBackButton, _x.buttonBackPress, _x.buttonBackRelease, _x.buttonStartButton, _x.buttonStartPress, _x.buttonStartRelease, _x.stickLeftButton, _x.stickLeftPress, _x.stickLeftRelease, _x.stickRightButton, _x.stickRightPress, _x.stickRightRelease, _x.directionUpButton, _x.directionUpPress, _x.directionUpRelease, _x.directionDownButton, _x.directionDownPress, _x.directionDownRelease, _x.directionLeftButton, _x.directionLeftPress, _x.directionLeftRelease, _x.directionRightButton, _x.directionRightPress, _x.directionRightRelease,) = _get_struct_6d42B().unpack(str[start:end])
      self.buttonAButton = bool(self.buttonAButton)
      self.buttonAPress = bool(self.buttonAPress)
      self.buttonARelease = bool(self.buttonARelease)
      self.buttonBButton = bool(self.buttonBButton)
      self.buttonBPress = bool(self.buttonBPress)
      self.buttonBRelease = bool(self.buttonBRelease)
      self.buttonXButton = bool(self.buttonXButton)
      self.buttonXPress = bool(self.buttonXPress)
      self.buttonXRelease = bool(self.buttonXRelease)
      self.buttonYButton = bool(self.buttonYButton)
      self.buttonYPress = bool(self.buttonYPress)
      self.buttonYRelease = bool(self.buttonYRelease)
      self.bumperLeftButton = bool(self.bumperLeftButton)
      self.bumperLeftPress = bool(self.bumperLeftPress)
      self.bumperLeftRelease = bool(self.bumperLeftRelease)
      self.bumperRightButton = bool(self.bumperRightButton)
      self.bumperRightPress = bool(self.bumperRightPress)
      self.bumperRightRelease = bool(self.bumperRightRelease)
      self.buttonBackButton = bool(self.buttonBackButton)
      self.buttonBackPress = bool(self.buttonBackPress)
      self.buttonBackRelease = bool(self.buttonBackRelease)
      self.buttonStartButton = bool(self.buttonStartButton)
      self.buttonStartPress = bool(self.buttonStartPress)
      self.buttonStartRelease = bool(self.buttonStartRelease)
      self.stickLeftButton = bool(self.stickLeftButton)
      self.stickLeftPress = bool(self.stickLeftPress)
      self.stickLeftRelease = bool(self.stickLeftRelease)
      self.stickRightButton = bool(self.stickRightButton)
      self.stickRightPress = bool(self.stickRightPress)
      self.stickRightRelease = bool(self.stickRightRelease)
      self.directionUpButton = bool(self.directionUpButton)
      self.directionUpPress = bool(self.directionUpPress)
      self.directionUpRelease = bool(self.directionUpRelease)
      self.directionDownButton = bool(self.directionDownButton)
      self.directionDownPress = bool(self.directionDownPress)
      self.directionDownRelease = bool(self.directionDownRelease)
      self.directionLeftButton = bool(self.directionLeftButton)
      self.directionLeftPress = bool(self.directionLeftPress)
      self.directionLeftRelease = bool(self.directionLeftRelease)
      self.directionRightButton = bool(self.directionRightButton)
      self.directionRightPress = bool(self.directionRightPress)
      self.directionRightRelease = bool(self.directionRightRelease)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d42B().pack(_x.leftStickX, _x.leftStickY, _x.rightStickX, _x.rightStickY, _x.leftTrigger, _x.rightTrigger, _x.buttonAButton, _x.buttonAPress, _x.buttonARelease, _x.buttonBButton, _x.buttonBPress, _x.buttonBRelease, _x.buttonXButton, _x.buttonXPress, _x.buttonXRelease, _x.buttonYButton, _x.buttonYPress, _x.buttonYRelease, _x.bumperLeftButton, _x.bumperLeftPress, _x.bumperLeftRelease, _x.bumperRightButton, _x.bumperRightPress, _x.bumperRightRelease, _x.buttonBackButton, _x.buttonBackPress, _x.buttonBackRelease, _x.buttonStartButton, _x.buttonStartPress, _x.buttonStartRelease, _x.stickLeftButton, _x.stickLeftPress, _x.stickLeftRelease, _x.stickRightButton, _x.stickRightPress, _x.stickRightRelease, _x.directionUpButton, _x.directionUpPress, _x.directionUpRelease, _x.directionDownButton, _x.directionDownPress, _x.directionDownRelease, _x.directionLeftButton, _x.directionLeftPress, _x.directionLeftRelease, _x.directionRightButton, _x.directionRightPress, _x.directionRightRelease))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.leftStickX, _x.leftStickY, _x.rightStickX, _x.rightStickY, _x.leftTrigger, _x.rightTrigger, _x.buttonAButton, _x.buttonAPress, _x.buttonARelease, _x.buttonBButton, _x.buttonBPress, _x.buttonBRelease, _x.buttonXButton, _x.buttonXPress, _x.buttonXRelease, _x.buttonYButton, _x.buttonYPress, _x.buttonYRelease, _x.bumperLeftButton, _x.bumperLeftPress, _x.bumperLeftRelease, _x.bumperRightButton, _x.bumperRightPress, _x.bumperRightRelease, _x.buttonBackButton, _x.buttonBackPress, _x.buttonBackRelease, _x.buttonStartButton, _x.buttonStartPress, _x.buttonStartRelease, _x.stickLeftButton, _x.stickLeftPress, _x.stickLeftRelease, _x.stickRightButton, _x.stickRightPress, _x.stickRightRelease, _x.directionUpButton, _x.directionUpPress, _x.directionUpRelease, _x.directionDownButton, _x.directionDownPress, _x.directionDownRelease, _x.directionLeftButton, _x.directionLeftPress, _x.directionLeftRelease, _x.directionRightButton, _x.directionRightPress, _x.directionRightRelease,) = _get_struct_6d42B().unpack(str[start:end])
      self.buttonAButton = bool(self.buttonAButton)
      self.buttonAPress = bool(self.buttonAPress)
      self.buttonARelease = bool(self.buttonARelease)
      self.buttonBButton = bool(self.buttonBButton)
      self.buttonBPress = bool(self.buttonBPress)
      self.buttonBRelease = bool(self.buttonBRelease)
      self.buttonXButton = bool(self.buttonXButton)
      self.buttonXPress = bool(self.buttonXPress)
      self.buttonXRelease = bool(self.buttonXRelease)
      self.buttonYButton = bool(self.buttonYButton)
      self.buttonYPress = bool(self.buttonYPress)
      self.buttonYRelease = bool(self.buttonYRelease)
      self.bumperLeftButton = bool(self.bumperLeftButton)
      self.bumperLeftPress = bool(self.bumperLeftPress)
      self.bumperLeftRelease = bool(self.bumperLeftRelease)
      self.bumperRightButton = bool(self.bumperRightButton)
      self.bumperRightPress = bool(self.bumperRightPress)
      self.bumperRightRelease = bool(self.bumperRightRelease)
      self.buttonBackButton = bool(self.buttonBackButton)
      self.buttonBackPress = bool(self.buttonBackPress)
      self.buttonBackRelease = bool(self.buttonBackRelease)
      self.buttonStartButton = bool(self.buttonStartButton)
      self.buttonStartPress = bool(self.buttonStartPress)
      self.buttonStartRelease = bool(self.buttonStartRelease)
      self.stickLeftButton = bool(self.stickLeftButton)
      self.stickLeftPress = bool(self.stickLeftPress)
      self.stickLeftRelease = bool(self.stickLeftRelease)
      self.stickRightButton = bool(self.stickRightButton)
      self.stickRightPress = bool(self.stickRightPress)
      self.stickRightRelease = bool(self.stickRightRelease)
      self.directionUpButton = bool(self.directionUpButton)
      self.directionUpPress = bool(self.directionUpPress)
      self.directionUpRelease = bool(self.directionUpRelease)
      self.directionDownButton = bool(self.directionDownButton)
      self.directionDownPress = bool(self.directionDownPress)
      self.directionDownRelease = bool(self.directionDownRelease)
      self.directionLeftButton = bool(self.directionLeftButton)
      self.directionLeftPress = bool(self.directionLeftPress)
      self.directionLeftRelease = bool(self.directionLeftRelease)
      self.directionRightButton = bool(self.directionRightButton)
      self.directionRightPress = bool(self.directionRightPress)
      self.directionRightRelease = bool(self.directionRightRelease)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d42B = None
def _get_struct_6d42B():
    global _struct_6d42B
    if _struct_6d42B is None:
        _struct_6d42B = struct.Struct("<6d42B")
    return _struct_6d42B
