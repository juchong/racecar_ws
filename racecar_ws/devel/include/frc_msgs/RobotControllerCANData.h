// Generated by gencpp from file frc_msgs/RobotControllerCANData.msg
// DO NOT EDIT!


#ifndef FRC_MSGS_MESSAGE_ROBOTCONTROLLERCANDATA_H
#define FRC_MSGS_MESSAGE_ROBOTCONTROLLERCANDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frc_msgs
{
template <class ContainerAllocator>
struct RobotControllerCANData_
{
  typedef RobotControllerCANData_<ContainerAllocator> Type;

  RobotControllerCANData_()
    : percentBusUtilization(0.0)
    , busOffCount(0)
    , txFullCount(0)
    , receiveErrorCount(0)
    , transmitErrorCount(0)  {
    }
  RobotControllerCANData_(const ContainerAllocator& _alloc)
    : percentBusUtilization(0.0)
    , busOffCount(0)
    , txFullCount(0)
    , receiveErrorCount(0)
    , transmitErrorCount(0)  {
  (void)_alloc;
    }



   typedef float _percentBusUtilization_type;
  _percentBusUtilization_type percentBusUtilization;

   typedef int32_t _busOffCount_type;
  _busOffCount_type busOffCount;

   typedef int32_t _txFullCount_type;
  _txFullCount_type txFullCount;

   typedef int32_t _receiveErrorCount_type;
  _receiveErrorCount_type receiveErrorCount;

   typedef int32_t _transmitErrorCount_type;
  _transmitErrorCount_type transmitErrorCount;





  typedef boost::shared_ptr< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> const> ConstPtr;

}; // struct RobotControllerCANData_

typedef ::frc_msgs::RobotControllerCANData_<std::allocator<void> > RobotControllerCANData;

typedef boost::shared_ptr< ::frc_msgs::RobotControllerCANData > RobotControllerCANDataPtr;
typedef boost::shared_ptr< ::frc_msgs::RobotControllerCANData const> RobotControllerCANDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frc_msgs::RobotControllerCANData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace frc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'frc_msgs': ['/home/niallmullane/racecar_ws/racecar_ws/src/frc_msgs/msg', '/home/niallmullane/racecar_ws/racecar_ws/src/frc_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14b84f7dc25f03687604ab1fd7c46f75";
  }

  static const char* value(const ::frc_msgs::RobotControllerCANData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14b84f7dc25f0368ULL;
  static const uint64_t static_value2 = 0x7604ab1fd7c46f75ULL;
};

template<class ContainerAllocator>
struct DataType< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frc_msgs/RobotControllerCANData";
  }

  static const char* value(const ::frc_msgs::RobotControllerCANData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 percentBusUtilization\n\
int32 busOffCount\n\
int32 txFullCount\n\
int32 receiveErrorCount\n\
int32 transmitErrorCount\n\
";
  }

  static const char* value(const ::frc_msgs::RobotControllerCANData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percentBusUtilization);
      stream.next(m.busOffCount);
      stream.next(m.txFullCount);
      stream.next(m.receiveErrorCount);
      stream.next(m.transmitErrorCount);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotControllerCANData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frc_msgs::RobotControllerCANData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frc_msgs::RobotControllerCANData_<ContainerAllocator>& v)
  {
    s << indent << "percentBusUtilization: ";
    Printer<float>::stream(s, indent + "  ", v.percentBusUtilization);
    s << indent << "busOffCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.busOffCount);
    s << indent << "txFullCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.txFullCount);
    s << indent << "receiveErrorCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.receiveErrorCount);
    s << indent << "transmitErrorCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.transmitErrorCount);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRC_MSGS_MESSAGE_ROBOTCONTROLLERCANDATA_H
