// Generated by gencpp from file frc_msgs/PCMState.msg
// DO NOT EDIT!


#ifndef FRC_MSGS_MESSAGE_PCMSTATE_H
#define FRC_MSGS_MESSAGE_PCMSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace frc_msgs
{
template <class ContainerAllocator>
struct PCMState_
{
  typedef PCMState_<ContainerAllocator> Type;

  PCMState_()
    : header()
    , name()
    , pcm_id()
    , enabled()
    , pressure_switch()
    , compressor_current()
    , closed_loop_control()
    , current_too_high()
    , current_too_high_sticky()
    , shorted()
    , shorted_sticky()
    , not_connected()
    , not_connected_sticky()
    , voltage_fault()
    , voltage_sticky_fault()
    , solenoid_blacklist()  {
    }
  PCMState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , pcm_id(_alloc)
    , enabled(_alloc)
    , pressure_switch(_alloc)
    , compressor_current(_alloc)
    , closed_loop_control(_alloc)
    , current_too_high(_alloc)
    , current_too_high_sticky(_alloc)
    , shorted(_alloc)
    , shorted_sticky(_alloc)
    , not_connected(_alloc)
    , not_connected_sticky(_alloc)
    , voltage_fault(_alloc)
    , voltage_sticky_fault(_alloc)
    , solenoid_blacklist(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _pcm_id_type;
  _pcm_id_type pcm_id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _enabled_type;
  _enabled_type enabled;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _pressure_switch_type;
  _pressure_switch_type pressure_switch;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _compressor_current_type;
  _compressor_current_type compressor_current;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _closed_loop_control_type;
  _closed_loop_control_type closed_loop_control;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _current_too_high_type;
  _current_too_high_type current_too_high;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _current_too_high_sticky_type;
  _current_too_high_sticky_type current_too_high_sticky;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _shorted_type;
  _shorted_type shorted;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _shorted_sticky_type;
  _shorted_sticky_type shorted_sticky;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _not_connected_type;
  _not_connected_type not_connected;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _not_connected_sticky_type;
  _not_connected_sticky_type not_connected_sticky;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _voltage_fault_type;
  _voltage_fault_type voltage_fault;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _voltage_sticky_fault_type;
  _voltage_sticky_fault_type voltage_sticky_fault;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _solenoid_blacklist_type;
  _solenoid_blacklist_type solenoid_blacklist;





  typedef boost::shared_ptr< ::frc_msgs::PCMState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frc_msgs::PCMState_<ContainerAllocator> const> ConstPtr;

}; // struct PCMState_

typedef ::frc_msgs::PCMState_<std::allocator<void> > PCMState;

typedef boost::shared_ptr< ::frc_msgs::PCMState > PCMStatePtr;
typedef boost::shared_ptr< ::frc_msgs::PCMState const> PCMStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frc_msgs::PCMState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frc_msgs::PCMState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace frc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'frc_msgs': ['/home/niallmullane/racecar_ws/racecar_ws/src/frc_msgs/msg', '/home/niallmullane/racecar_ws/racecar_ws/src/frc_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::frc_msgs::PCMState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frc_msgs::PCMState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frc_msgs::PCMState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frc_msgs::PCMState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frc_msgs::PCMState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frc_msgs::PCMState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frc_msgs::PCMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81c063a265e9b3f14b664414961808c7";
  }

  static const char* value(const ::frc_msgs::PCMState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81c063a265e9b3f1ULL;
  static const uint64_t static_value2 = 0x4b664414961808c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::frc_msgs::PCMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frc_msgs/PCMState";
  }

  static const char* value(const ::frc_msgs::PCMState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frc_msgs::PCMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header\n\
\n\
string[]  name\n\
int32[]   pcm_id\n\
bool[]    enabled\n\
bool[]    pressure_switch\n\
float64[] compressor_current\n\
bool[]    closed_loop_control\n\
bool[]    current_too_high\n\
bool[]    current_too_high_sticky\n\
bool[]    shorted\n\
bool[]    shorted_sticky\n\
bool[]    not_connected\n\
bool[]    not_connected_sticky\n\
bool[]    voltage_fault\n\
bool[]    voltage_sticky_fault\n\
uint32[]  solenoid_blacklist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::frc_msgs::PCMState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frc_msgs::PCMState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.pcm_id);
      stream.next(m.enabled);
      stream.next(m.pressure_switch);
      stream.next(m.compressor_current);
      stream.next(m.closed_loop_control);
      stream.next(m.current_too_high);
      stream.next(m.current_too_high_sticky);
      stream.next(m.shorted);
      stream.next(m.shorted_sticky);
      stream.next(m.not_connected);
      stream.next(m.not_connected_sticky);
      stream.next(m.voltage_fault);
      stream.next(m.voltage_sticky_fault);
      stream.next(m.solenoid_blacklist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PCMState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frc_msgs::PCMState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frc_msgs::PCMState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "pcm_id[]" << std::endl;
    for (size_t i = 0; i < v.pcm_id.size(); ++i)
    {
      s << indent << "  pcm_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pcm_id[i]);
    }
    s << indent << "enabled[]" << std::endl;
    for (size_t i = 0; i < v.enabled.size(); ++i)
    {
      s << indent << "  enabled[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.enabled[i]);
    }
    s << indent << "pressure_switch[]" << std::endl;
    for (size_t i = 0; i < v.pressure_switch.size(); ++i)
    {
      s << indent << "  pressure_switch[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pressure_switch[i]);
    }
    s << indent << "compressor_current[]" << std::endl;
    for (size_t i = 0; i < v.compressor_current.size(); ++i)
    {
      s << indent << "  compressor_current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.compressor_current[i]);
    }
    s << indent << "closed_loop_control[]" << std::endl;
    for (size_t i = 0; i < v.closed_loop_control.size(); ++i)
    {
      s << indent << "  closed_loop_control[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.closed_loop_control[i]);
    }
    s << indent << "current_too_high[]" << std::endl;
    for (size_t i = 0; i < v.current_too_high.size(); ++i)
    {
      s << indent << "  current_too_high[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.current_too_high[i]);
    }
    s << indent << "current_too_high_sticky[]" << std::endl;
    for (size_t i = 0; i < v.current_too_high_sticky.size(); ++i)
    {
      s << indent << "  current_too_high_sticky[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.current_too_high_sticky[i]);
    }
    s << indent << "shorted[]" << std::endl;
    for (size_t i = 0; i < v.shorted.size(); ++i)
    {
      s << indent << "  shorted[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.shorted[i]);
    }
    s << indent << "shorted_sticky[]" << std::endl;
    for (size_t i = 0; i < v.shorted_sticky.size(); ++i)
    {
      s << indent << "  shorted_sticky[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.shorted_sticky[i]);
    }
    s << indent << "not_connected[]" << std::endl;
    for (size_t i = 0; i < v.not_connected.size(); ++i)
    {
      s << indent << "  not_connected[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.not_connected[i]);
    }
    s << indent << "not_connected_sticky[]" << std::endl;
    for (size_t i = 0; i < v.not_connected_sticky.size(); ++i)
    {
      s << indent << "  not_connected_sticky[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.not_connected_sticky[i]);
    }
    s << indent << "voltage_fault[]" << std::endl;
    for (size_t i = 0; i < v.voltage_fault.size(); ++i)
    {
      s << indent << "  voltage_fault[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.voltage_fault[i]);
    }
    s << indent << "voltage_sticky_fault[]" << std::endl;
    for (size_t i = 0; i < v.voltage_sticky_fault.size(); ++i)
    {
      s << indent << "  voltage_sticky_fault[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.voltage_sticky_fault[i]);
    }
    s << indent << "solenoid_blacklist[]" << std::endl;
    for (size_t i = 0; i < v.solenoid_blacklist.size(); ++i)
    {
      s << indent << "  solenoid_blacklist[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.solenoid_blacklist[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRC_MSGS_MESSAGE_PCMSTATE_H
