// Generated by gencpp from file ros_control_boilerplate/set_limit_switchRequest.msg
// DO NOT EDIT!


#ifndef ROS_CONTROL_BOILERPLATE_MESSAGE_SET_LIMIT_SWITCHREQUEST_H
#define ROS_CONTROL_BOILERPLATE_MESSAGE_SET_LIMIT_SWITCHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_control_boilerplate
{
template <class ContainerAllocator>
struct set_limit_switchRequest_
{
  typedef set_limit_switchRequest_<ContainerAllocator> Type;

  set_limit_switchRequest_()
    : target_joint_id(0)
    , forward(false)
    , reverse(false)  {
    }
  set_limit_switchRequest_(const ContainerAllocator& _alloc)
    : target_joint_id(0)
    , forward(false)
    , reverse(false)  {
  (void)_alloc;
    }



   typedef uint8_t _target_joint_id_type;
  _target_joint_id_type target_joint_id;

   typedef uint8_t _forward_type;
  _forward_type forward;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;





  typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_limit_switchRequest_

typedef ::ros_control_boilerplate::set_limit_switchRequest_<std::allocator<void> > set_limit_switchRequest;

typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest > set_limit_switchRequestPtr;
typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest const> set_limit_switchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_control_boilerplate

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ros_control_boilerplate': ['/home/niallmullane/racecar_ws/racecar_ws/src/ros_control_boilerplate/msg', '/home/niallmullane/racecar_ws/racecar_ws/src/ros_control_boilerplate/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98a89b0b94ee528e0c04d8b0f6aa13dd";
  }

  static const char* value(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98a89b0b94ee528eULL;
  static const uint64_t static_value2 = 0x0c04d8b0f6aa13ddULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_control_boilerplate/set_limit_switchRequest";
  }

  static const char* value(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 target_joint_id\n\
bool forward\n\
bool reverse\n\
";
  }

  static const char* value(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_joint_id);
      stream.next(m.forward);
      stream.next(m.reverse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_limit_switchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_joint_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_joint_id);
    s << indent << "forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward);
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CONTROL_BOILERPLATE_MESSAGE_SET_LIMIT_SWITCHREQUEST_H
