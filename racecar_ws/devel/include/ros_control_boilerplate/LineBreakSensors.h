// Generated by gencpp from file ros_control_boilerplate/LineBreakSensors.msg
// DO NOT EDIT!


#ifndef ROS_CONTROL_BOILERPLATE_MESSAGE_LINEBREAKSENSORS_H
#define ROS_CONTROL_BOILERPLATE_MESSAGE_LINEBREAKSENSORS_H

#include <ros/service_traits.h>


#include <ros_control_boilerplate/LineBreakSensorsRequest.h>
#include <ros_control_boilerplate/LineBreakSensorsResponse.h>


namespace ros_control_boilerplate
{

struct LineBreakSensors
{

typedef LineBreakSensorsRequest Request;
typedef LineBreakSensorsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct LineBreakSensors
} // namespace ros_control_boilerplate


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::ros_control_boilerplate::LineBreakSensors > {
  static const char* value()
  {
    return "0162edbbc243aaa4ac88fdc1acd8d433";
  }

  static const char* value(const ::ros_control_boilerplate::LineBreakSensors&) { return value(); }
};

template<>
struct DataType< ::ros_control_boilerplate::LineBreakSensors > {
  static const char* value()
  {
    return "ros_control_boilerplate/LineBreakSensors";
  }

  static const char* value(const ::ros_control_boilerplate::LineBreakSensors&) { return value(); }
};


// service_traits::MD5Sum< ::ros_control_boilerplate::LineBreakSensorsRequest> should match 
// service_traits::MD5Sum< ::ros_control_boilerplate::LineBreakSensors > 
template<>
struct MD5Sum< ::ros_control_boilerplate::LineBreakSensorsRequest>
{
  static const char* value()
  {
    return MD5Sum< ::ros_control_boilerplate::LineBreakSensors >::value();
  }
  static const char* value(const ::ros_control_boilerplate::LineBreakSensorsRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::ros_control_boilerplate::LineBreakSensorsRequest> should match 
// service_traits::DataType< ::ros_control_boilerplate::LineBreakSensors > 
template<>
struct DataType< ::ros_control_boilerplate::LineBreakSensorsRequest>
{
  static const char* value()
  {
    return DataType< ::ros_control_boilerplate::LineBreakSensors >::value();
  }
  static const char* value(const ::ros_control_boilerplate::LineBreakSensorsRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::ros_control_boilerplate::LineBreakSensorsResponse> should match 
// service_traits::MD5Sum< ::ros_control_boilerplate::LineBreakSensors > 
template<>
struct MD5Sum< ::ros_control_boilerplate::LineBreakSensorsResponse>
{
  static const char* value()
  {
    return MD5Sum< ::ros_control_boilerplate::LineBreakSensors >::value();
  }
  static const char* value(const ::ros_control_boilerplate::LineBreakSensorsResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::ros_control_boilerplate::LineBreakSensorsResponse> should match 
// service_traits::DataType< ::ros_control_boilerplate::LineBreakSensors > 
template<>
struct DataType< ::ros_control_boilerplate::LineBreakSensorsResponse>
{
  static const char* value()
  {
    return DataType< ::ros_control_boilerplate::LineBreakSensors >::value();
  }
  static const char* value(const ::ros_control_boilerplate::LineBreakSensorsResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ROS_CONTROL_BOILERPLATE_MESSAGE_LINEBREAKSENSORS_H
